Working with Api's
Q)Write script to fetch data from an API

Answer 1:

let p = fetch("https://goweather.herokuapp.com/weather/India")
    p.then((response)=>{
        return response.json()
    }).then((response)=>{
        console.log(response)
    })

//In html <script src="JavaScript3 .js"></script>

Answer 2:

//In html 
 <table>
        <thead>
            <tr>
                <th>name</th>
                <th>slug</th>
                <th>house</th>
                <th>quotes</th>
            </tr>
        </thead>

        <tbody id="data-output">

        </tbody>
    </table>

    <script src="JavaScript3 .js"></script>

//in js


let p = fetch("https://api.gameofthronesquotes.xyz/v1/characters")
p.then(function(response) {
       return response.json();
}).then(function(values) {
       let placeholder = document.querySelector("#data-output");
       let out = "";

       for(let value of values){
          out += `
             <tr>
                <td>${value.name}</td>
                <td>${value.slug}</td>
                <td>${value.house}</td>
                <td>${value.quotes}</td>
             </tr>
          `;
       }
       placeholder.innerHTML = out;
})

*Asynchonorous Javascript
Q)Set time out ,interval and promises

Answer 1:

document.write('Hello')

let a = setTimeout(function () {
    alert("i am inside of settimeout")
}, 5000)

let b = prompt("do you  want to run the settimeout?")
if("n" == b){
    clearTimeout(a)
}
console.log(a)

Answer 2:

function sayHello() {
    console.log("Hello, world!");
}


const intervalId = setInterval(sayHello, 1000);

Answer 3:

function fetchDataWithPromise() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const success = true;
            if (success) {
                resolve("Data fetched successfully!");
            } else {
                reject("Failed to fetch data");
            }
        }, 2000);
    });
}

fetchDataWithPromise()
    .then((data) => {
        console.log(data);
    })
    .catch((error) => {
        console.error(error);
    });